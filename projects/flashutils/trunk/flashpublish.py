#!/usr/bin/env python
"""Export a FLA file to SWF by creating a JSFL script and running it with Flash."""

import os, sys, tempfile, time
from optparse import OptionParser
from os.path import abspath, basename, dirname, exists, join, normpath, splitext

__program__   = 'flashpublish'
__author__    = 'Christopher Arndt'
__version__   = '0.1b'
__date__      = '$Date$'
__revision__  = '$Rev$'
__copyright__ = 'Python license'

__usage__ = """\
Usage: %%prog [OPTIONS] FILE...
Version: %s""" % __version__

JSFL_HEADER = """\
/*
 * Generated by %s version %s
 * Homepage: http://chrisarndt.de/en/software/flashutils
 * Creation time: %s
 */
"""

class Error(Exception):
    pass

def usage():
    """Print program usage information to stdout."""

    parser.print_help()

def warn(*args):
    """Convert all arguments to strings and print to stderr."""

    sys.stderr.write(" ".join([str(x) for x in args]) + '\n')

def createURI(path):
    return "file:///%s" % abspath(path).replace('\\', '/')

def create_jsfl(flafiles):
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S %Z")
    jsfl = []
    jsfl.append(JSFL_HEADER % (__program__, __version__, timestamp))
    if options.profile:
        jsfl.append('var publishProfile = "%s";' \
          % createURI(options.profile))

    if options.logfile:
        jsfl.append('var logfile = "%s";' % createURI(options.logfile))
    jsfl.append('fl.outputPanel.clear();')

    for fla in flafiles:
        jsfl.append('var doc = fl.openDocument("%s");' % createURI(fla))
        if options.profile:
            jsfl.append(
              'fl.getDocumentDOM().importPublishProfile(publishProfile);')
        jsfl.append("fl.getDocumentDOM().publish();")
        if options.closedoc:
            jsfl.append("fl.getDocumentDOM().close(false);")
    if options.logfile:
        jsfl.append("fl.outputPanel.save(logfile, true);")
    if options.exitflash:
        jsfl.append("fl.quit(false);")

    return "\n".join(jsfl)

def publish(flafiles):
    """Create a JSFL with commands to publish a FLA file(s) and run it."""

    script = create_jsfl(flafiles)
    if options.dryrun or options.verbose:
        print script
    return run_jsfl(script)
    return 0

def run_jsfl(script):
    try:
        if options.tempdir:
            fh, fn = tempfile.mkstemp('.jsfl', 'publish_', options.tempdir)
        else:
            fh, fn = tempfile.mkstemp('.jsfl', 'publish_')
    except (IOError, OSError), exc:
        raise Error, "Could not create JSFL file: %s" % exc
    jsfl = os.fdopen(fh, 'w')
    jsfl.write(script)
    jsfl.close()
    warn("Writing JSFL script to '%s'..." % fn)
    if os.name == 'osx':
        cmd = "osascript -e 'tell application \"Flash\" to open posix file \"%s\"'" % fn
    if not options.dryrun:
        if sys.platform == 'win32':
            result = os.startfile(normpath(fn))
        else:
            result = os.system(cmd) >> 8
    else:
        result = 0
    if options.clean:
        os.unlink(fn)
    return result

def main(args):
    """Parse commandline arguments and run publish().
    """

    global options, parser

    parser = OptionParser(prog=__program__, usage=__usage__,
      version=__version__, description=__doc__)
    parser.add_option("-p", "--profile", dest="profile",
      help="Use exported profile in file PROFILE.", metavar="PROFILE")
    parser.add_option("-t", "--tempdir", dest="tempdir",
      help="Write temporary files to DIR.", metavar="DIR")
    parser.add_option("-l", "--logfile", dest="logfile",
      help="Save status messages to logfile LOG.",
      metavar="LOG")
    parser.add_option("-d", "--dry-run",
      action="store_true", dest="dryrun", default=False,
      help="Only print the JSFL script, don't run it.")
    parser.add_option("-v", "--verbose",
      action="store_true", dest="verbose", default=False,
      help="Print to stdout (and logfile) what's going on.")
    parser.add_option("-n", "--no-clean",
      action="store_false", dest="clean", default=True,
      help="Don't clean temporary files on exit.")
    parser.add_option("-y", "--dont-close",
      action="store_false", dest="closedoc", default=True,
      help="Don't close FLA file(s) loaded into Flash.")
    parser.add_option("-x", "--exit-flash",
      action="store_true", dest="exitflash", default=False,
      help="Exit Flash program after running the script.")

    (options, args) = parser.parse_args(args=args)

    if not args:
        usage()
        return 1
    try:
        import mglob
    except ImportError:
        files = args
    else:
        files = mglob.expand(args)

    return publish(files)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
